// AUTOGENERATED: DO NOT EDIT!
// Built from RISC-V ISA opcode definitions: https://github.com/riscv/riscv-opcodes

package assemble

import "github.com/hawkowl/biscuit/pkg/opcodes"

type OP_CSRRW struct {
	opcodes.OP_CSRRW
}

func CSRRW(RD uint32, RS1 uint32, CSR uint32) OP_CSRRW {
	return OP_CSRRW{
		opcodes.OP_CSRRW{
			RD:  RD,
			RS1: RS1,
			CSR: CSR,
		},
	}
}

func (o OP_CSRRW) Encode() (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	CSR, err := GEN_CSR(o.CSR)
	if err != nil {
		return 0, err
	}

	return 0x00001073 | RD | RS1 | CSR, nil
}

type OP_CSRRS struct {
	opcodes.OP_CSRRS
}

func CSRRS(RD uint32, RS1 uint32, CSR uint32) OP_CSRRS {
	return OP_CSRRS{
		opcodes.OP_CSRRS{
			RD:  RD,
			RS1: RS1,
			CSR: CSR,
		},
	}
}

func (o OP_CSRRS) Encode() (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	CSR, err := GEN_CSR(o.CSR)
	if err != nil {
		return 0, err
	}

	return 0x00002073 | RD | RS1 | CSR, nil
}

type OP_CSRRC struct {
	opcodes.OP_CSRRC
}

func CSRRC(RD uint32, RS1 uint32, CSR uint32) OP_CSRRC {
	return OP_CSRRC{
		opcodes.OP_CSRRC{
			RD:  RD,
			RS1: RS1,
			CSR: CSR,
		},
	}
}

func (o OP_CSRRC) Encode() (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	CSR, err := GEN_CSR(o.CSR)
	if err != nil {
		return 0, err
	}

	return 0x00003073 | RD | RS1 | CSR, nil
}

type OP_CSRRWI struct {
	opcodes.OP_CSRRWI
}

func CSRRWI(RD uint32, CSR uint32, ZIMM uint32) OP_CSRRWI {
	return OP_CSRRWI{
		opcodes.OP_CSRRWI{
			RD:   RD,
			CSR:  CSR,
			ZIMM: ZIMM,
		},
	}
}

func (o OP_CSRRWI) Encode() (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	CSR, err := GEN_CSR(o.CSR)
	if err != nil {
		return 0, err
	}
	ZIMM, err := GEN_ZIMM(o.ZIMM)
	if err != nil {
		return 0, err
	}

	return 0x00005073 | RD | CSR | ZIMM, nil
}

type OP_CSRRSI struct {
	opcodes.OP_CSRRSI
}

func CSRRSI(RD uint32, CSR uint32, ZIMM uint32) OP_CSRRSI {
	return OP_CSRRSI{
		opcodes.OP_CSRRSI{
			RD:   RD,
			CSR:  CSR,
			ZIMM: ZIMM,
		},
	}
}

func (o OP_CSRRSI) Encode() (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	CSR, err := GEN_CSR(o.CSR)
	if err != nil {
		return 0, err
	}
	ZIMM, err := GEN_ZIMM(o.ZIMM)
	if err != nil {
		return 0, err
	}

	return 0x00006073 | RD | CSR | ZIMM, nil
}

type OP_CSRRCI struct {
	opcodes.OP_CSRRCI
}

func CSRRCI(RD uint32, CSR uint32, ZIMM uint32) OP_CSRRCI {
	return OP_CSRRCI{
		opcodes.OP_CSRRCI{
			RD:   RD,
			CSR:  CSR,
			ZIMM: ZIMM,
		},
	}
}

func (o OP_CSRRCI) Encode() (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	CSR, err := GEN_CSR(o.CSR)
	if err != nil {
		return 0, err
	}
	ZIMM, err := GEN_ZIMM(o.ZIMM)
	if err != nil {
		return 0, err
	}

	return 0x00007073 | RD | CSR | ZIMM, nil
}
