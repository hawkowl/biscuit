// AUTOGENERATED: DO NOT EDIT!
// Built from RISC-V ISA opcode definitions: https://github.com/riscv/riscv-opcodes

package assemble

import "github.com/hawkowl/biscuit/pkg/opcodes"

func EncodeCSRRW(o opcodes.OP_CSRRW) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	CSR, err := GEN_CSR(o.CSR)
	if err != nil {
		return 0, err
	}
	return 0x00001073 | RD | RS1 | CSR, nil
}

func EncodeCSRRS(o opcodes.OP_CSRRS) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	CSR, err := GEN_CSR(o.CSR)
	if err != nil {
		return 0, err
	}
	return 0x00002073 | RD | RS1 | CSR, nil
}

func EncodeCSRRC(o opcodes.OP_CSRRC) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	CSR, err := GEN_CSR(o.CSR)
	if err != nil {
		return 0, err
	}
	return 0x00003073 | RD | RS1 | CSR, nil
}

func EncodeCSRRWI(o opcodes.OP_CSRRWI) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	CSR, err := GEN_CSR(o.CSR)
	if err != nil {
		return 0, err
	}
	ZIMM, err := GEN_ZIMM(o.ZIMM)
	if err != nil {
		return 0, err
	}
	return 0x00005073 | RD | CSR | ZIMM, nil
}

func EncodeCSRRSI(o opcodes.OP_CSRRSI) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	CSR, err := GEN_CSR(o.CSR)
	if err != nil {
		return 0, err
	}
	ZIMM, err := GEN_ZIMM(o.ZIMM)
	if err != nil {
		return 0, err
	}
	return 0x00006073 | RD | CSR | ZIMM, nil
}

func EncodeCSRRCI(o opcodes.OP_CSRRCI) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	CSR, err := GEN_CSR(o.CSR)
	if err != nil {
		return 0, err
	}
	ZIMM, err := GEN_ZIMM(o.ZIMM)
	if err != nil {
		return 0, err
	}
	return 0x00007073 | RD | CSR | ZIMM, nil
}
