// AUTOGENERATED: DO NOT EDIT!
// Built from RISC-V ISA opcode definitions: https://github.com/riscv/riscv-opcodes

package assemble

type OP_csrrw struct {
	RD  uint32
	RS1 uint32
	CSR uint32
}

func (o OP_csrrw) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	csr, err := GEN_csr(o.CSR)
	if err != nil {
		return
	}

	r = r | rd | rs1 | csr | (1 << 12) | (0x1C << 2) | (3)
	return
}

type OP_csrrs struct {
	RD  uint32
	RS1 uint32
	CSR uint32
}

func (o OP_csrrs) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	csr, err := GEN_csr(o.CSR)
	if err != nil {
		return
	}

	r = r | rd | rs1 | csr | (2 << 12) | (0x1C << 2) | (3)
	return
}

type OP_csrrc struct {
	RD  uint32
	RS1 uint32
	CSR uint32
}

func (o OP_csrrc) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	csr, err := GEN_csr(o.CSR)
	if err != nil {
		return
	}

	r = r | rd | rs1 | csr | (3 << 12) | (0x1C << 2) | (3)
	return
}

type OP_csrrwi struct {
	CSR  uint32
	ZIMM uint32
	RD   uint32
}

func (o OP_csrrwi) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	csr, err := GEN_csr(o.CSR)
	if err != nil {
		return
	}
	zimm, err := GEN_zimm(o.ZIMM)
	if err != nil {
		return
	}

	r = r | rd | csr | zimm | (5 << 12) | (0x1C << 2) | (3)
	return
}

type OP_csrrsi struct {
	CSR  uint32
	ZIMM uint32
	RD   uint32
}

func (o OP_csrrsi) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	csr, err := GEN_csr(o.CSR)
	if err != nil {
		return
	}
	zimm, err := GEN_zimm(o.ZIMM)
	if err != nil {
		return
	}

	r = r | rd | csr | zimm | (6 << 12) | (0x1C << 2) | (3)
	return
}

type OP_csrrci struct {
	RD   uint32
	CSR  uint32
	ZIMM uint32
}

func (o OP_csrrci) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	csr, err := GEN_csr(o.CSR)
	if err != nil {
		return
	}
	zimm, err := GEN_zimm(o.ZIMM)
	if err != nil {
		return
	}

	r = r | rd | csr | zimm | (7 << 12) | (0x1C << 2) | (3)
	return
}
