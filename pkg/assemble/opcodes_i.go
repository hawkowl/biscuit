// AUTOGENERATED: DO NOT EDIT!
// Built from RISC-V ISA opcode definitions: https://github.com/riscv/riscv-opcodes

package assemble

import "github.com/hawkowl/biscuit/pkg/opcodes"

type OP_LUI struct {
	opcodes.OP_LUI
}

func LUI(RD uint32, IMM20 uint32) OP_LUI {
	return OP_LUI{
		opcodes.OP_LUI{
			RD:    RD,
			IMM20: IMM20,
		},
	}
}

func (o OP_LUI) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	IMM20, err := GEN_IMM20(o.IMM20)
	if err != nil {
		return
	}

	r = r | RD | IMM20 | (0x0D << 2) | (3)
	return
}

type OP_AUIPC struct {
	opcodes.OP_AUIPC
}

func AUIPC(RD uint32, IMM20 uint32) OP_AUIPC {
	return OP_AUIPC{
		opcodes.OP_AUIPC{
			RD:    RD,
			IMM20: IMM20,
		},
	}
}

func (o OP_AUIPC) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	IMM20, err := GEN_IMM20(o.IMM20)
	if err != nil {
		return
	}

	r = r | RD | IMM20 | (0x05 << 2) | (3)
	return
}

type OP_JAL struct {
	opcodes.OP_JAL
}

func JAL(RD uint32, JIMM20 int32) OP_JAL {
	return OP_JAL{
		opcodes.OP_JAL{
			RD:     RD,
			JIMM20: JIMM20,
		},
	}
}

func (o OP_JAL) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	JIMM20, err := GEN_JIMM20(o.JIMM20)
	if err != nil {
		return
	}

	r = r | RD | JIMM20 | (0x1b << 2) | (3)
	return
}

type OP_JALR struct {
	opcodes.OP_JALR
}

func JALR(RD uint32, RS1 uint32, IMM12 int32) OP_JALR {
	return OP_JALR{
		opcodes.OP_JALR{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func (o OP_JALR) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return
	}

	r = r | RD | RS1 | IMM12 | (0 << 12) | (0x19 << 2) | (3)
	return
}

type OP_BEQ struct {
	opcodes.OP_BEQ
}

func BEQ(BIMM12 int32, RS1 uint32, RS2 uint32) OP_BEQ {
	return OP_BEQ{
		opcodes.OP_BEQ{
			BIMM12: BIMM12,
			RS1:    RS1,
			RS2:    RS2,
		},
	}
}

func (o OP_BEQ) Encode() (r uint32, err error) {
	BIMM12HI, err := GEN_BIMM12HI(o.BIMM12)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}
	BIMM12LO, err := GEN_BIMM12LO(o.BIMM12)
	if err != nil {
		return
	}

	r = r | BIMM12HI | RS1 | RS2 | BIMM12LO | (0 << 12) | (0x18 << 2) | (3)
	return
}

type OP_BNE struct {
	opcodes.OP_BNE
}

func BNE(BIMM12 int32, RS1 uint32, RS2 uint32) OP_BNE {
	return OP_BNE{
		opcodes.OP_BNE{
			BIMM12: BIMM12,
			RS1:    RS1,
			RS2:    RS2,
		},
	}
}

func (o OP_BNE) Encode() (r uint32, err error) {
	BIMM12HI, err := GEN_BIMM12HI(o.BIMM12)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}
	BIMM12LO, err := GEN_BIMM12LO(o.BIMM12)
	if err != nil {
		return
	}

	r = r | BIMM12HI | RS1 | RS2 | BIMM12LO | (1 << 12) | (0x18 << 2) | (3)
	return
}

type OP_BLT struct {
	opcodes.OP_BLT
}

func BLT(BIMM12 int32, RS1 uint32, RS2 uint32) OP_BLT {
	return OP_BLT{
		opcodes.OP_BLT{
			BIMM12: BIMM12,
			RS1:    RS1,
			RS2:    RS2,
		},
	}
}

func (o OP_BLT) Encode() (r uint32, err error) {
	BIMM12HI, err := GEN_BIMM12HI(o.BIMM12)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}
	BIMM12LO, err := GEN_BIMM12LO(o.BIMM12)
	if err != nil {
		return
	}

	r = r | BIMM12HI | RS1 | RS2 | BIMM12LO | (4 << 12) | (0x18 << 2) | (3)
	return
}

type OP_BGE struct {
	opcodes.OP_BGE
}

func BGE(BIMM12 int32, RS1 uint32, RS2 uint32) OP_BGE {
	return OP_BGE{
		opcodes.OP_BGE{
			BIMM12: BIMM12,
			RS1:    RS1,
			RS2:    RS2,
		},
	}
}

func (o OP_BGE) Encode() (r uint32, err error) {
	BIMM12HI, err := GEN_BIMM12HI(o.BIMM12)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}
	BIMM12LO, err := GEN_BIMM12LO(o.BIMM12)
	if err != nil {
		return
	}

	r = r | BIMM12HI | RS1 | RS2 | BIMM12LO | (5 << 12) | (0x18 << 2) | (3)
	return
}

type OP_BLTU struct {
	opcodes.OP_BLTU
}

func BLTU(BIMM12 int32, RS1 uint32, RS2 uint32) OP_BLTU {
	return OP_BLTU{
		opcodes.OP_BLTU{
			BIMM12: BIMM12,
			RS1:    RS1,
			RS2:    RS2,
		},
	}
}

func (o OP_BLTU) Encode() (r uint32, err error) {
	BIMM12HI, err := GEN_BIMM12HI(o.BIMM12)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}
	BIMM12LO, err := GEN_BIMM12LO(o.BIMM12)
	if err != nil {
		return
	}

	r = r | BIMM12HI | RS1 | RS2 | BIMM12LO | (6 << 12) | (0x18 << 2) | (3)
	return
}

type OP_BGEU struct {
	opcodes.OP_BGEU
}

func BGEU(BIMM12 int32, RS1 uint32, RS2 uint32) OP_BGEU {
	return OP_BGEU{
		opcodes.OP_BGEU{
			BIMM12: BIMM12,
			RS1:    RS1,
			RS2:    RS2,
		},
	}
}

func (o OP_BGEU) Encode() (r uint32, err error) {
	BIMM12HI, err := GEN_BIMM12HI(o.BIMM12)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}
	BIMM12LO, err := GEN_BIMM12LO(o.BIMM12)
	if err != nil {
		return
	}

	r = r | BIMM12HI | RS1 | RS2 | BIMM12LO | (7 << 12) | (0x18 << 2) | (3)
	return
}

type OP_LB struct {
	opcodes.OP_LB
}

func LB(RD uint32, RS1 uint32, IMM12 int32) OP_LB {
	return OP_LB{
		opcodes.OP_LB{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func (o OP_LB) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return
	}

	r = r | RD | RS1 | IMM12 | (0 << 12) | (0x00 << 2) | (3)
	return
}

type OP_LH struct {
	opcodes.OP_LH
}

func LH(RD uint32, RS1 uint32, IMM12 int32) OP_LH {
	return OP_LH{
		opcodes.OP_LH{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func (o OP_LH) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return
	}

	r = r | RD | RS1 | IMM12 | (1 << 12) | (0x00 << 2) | (3)
	return
}

type OP_LW struct {
	opcodes.OP_LW
}

func LW(RD uint32, RS1 uint32, IMM12 int32) OP_LW {
	return OP_LW{
		opcodes.OP_LW{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func (o OP_LW) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return
	}

	r = r | RD | RS1 | IMM12 | (2 << 12) | (0x00 << 2) | (3)
	return
}

type OP_LBU struct {
	opcodes.OP_LBU
}

func LBU(RD uint32, RS1 uint32, IMM12 int32) OP_LBU {
	return OP_LBU{
		opcodes.OP_LBU{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func (o OP_LBU) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return
	}

	r = r | RD | RS1 | IMM12 | (4 << 12) | (0x00 << 2) | (3)
	return
}

type OP_LHU struct {
	opcodes.OP_LHU
}

func LHU(RD uint32, RS1 uint32, IMM12 int32) OP_LHU {
	return OP_LHU{
		opcodes.OP_LHU{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func (o OP_LHU) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return
	}

	r = r | RD | RS1 | IMM12 | (5 << 12) | (0x00 << 2) | (3)
	return
}

type OP_SB struct {
	opcodes.OP_SB
}

func SB(IMM12 int32, RS1 uint32, RS2 uint32) OP_SB {
	return OP_SB{
		opcodes.OP_SB{
			IMM12: IMM12,
			RS1:   RS1,
			RS2:   RS2,
		},
	}
}

func (o OP_SB) Encode() (r uint32, err error) {
	IMM12HI, err := GEN_IMM12HI(o.IMM12)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}
	IMM12LO, err := GEN_IMM12LO(o.IMM12)
	if err != nil {
		return
	}

	r = r | IMM12HI | RS1 | RS2 | IMM12LO | (0 << 12) | (0x08 << 2) | (3)
	return
}

type OP_SH struct {
	opcodes.OP_SH
}

func SH(IMM12 int32, RS1 uint32, RS2 uint32) OP_SH {
	return OP_SH{
		opcodes.OP_SH{
			IMM12: IMM12,
			RS1:   RS1,
			RS2:   RS2,
		},
	}
}

func (o OP_SH) Encode() (r uint32, err error) {
	IMM12HI, err := GEN_IMM12HI(o.IMM12)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}
	IMM12LO, err := GEN_IMM12LO(o.IMM12)
	if err != nil {
		return
	}

	r = r | IMM12HI | RS1 | RS2 | IMM12LO | (1 << 12) | (0x08 << 2) | (3)
	return
}

type OP_SW struct {
	opcodes.OP_SW
}

func SW(IMM12 int32, RS1 uint32, RS2 uint32) OP_SW {
	return OP_SW{
		opcodes.OP_SW{
			IMM12: IMM12,
			RS1:   RS1,
			RS2:   RS2,
		},
	}
}

func (o OP_SW) Encode() (r uint32, err error) {
	IMM12HI, err := GEN_IMM12HI(o.IMM12)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}
	IMM12LO, err := GEN_IMM12LO(o.IMM12)
	if err != nil {
		return
	}

	r = r | IMM12HI | RS1 | RS2 | IMM12LO | (2 << 12) | (0x08 << 2) | (3)
	return
}

type OP_ADDI struct {
	opcodes.OP_ADDI
}

func ADDI(RD uint32, RS1 uint32, IMM12 int32) OP_ADDI {
	return OP_ADDI{
		opcodes.OP_ADDI{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func (o OP_ADDI) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return
	}

	r = r | RD | RS1 | IMM12 | (0 << 12) | (0x04 << 2) | (3)
	return
}

type OP_SLTI struct {
	opcodes.OP_SLTI
}

func SLTI(RD uint32, RS1 uint32, IMM12 int32) OP_SLTI {
	return OP_SLTI{
		opcodes.OP_SLTI{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func (o OP_SLTI) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return
	}

	r = r | RD | RS1 | IMM12 | (2 << 12) | (0x04 << 2) | (3)
	return
}

type OP_SLTIU struct {
	opcodes.OP_SLTIU
}

func SLTIU(RD uint32, RS1 uint32, IMM12 int32) OP_SLTIU {
	return OP_SLTIU{
		opcodes.OP_SLTIU{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func (o OP_SLTIU) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return
	}

	r = r | RD | RS1 | IMM12 | (3 << 12) | (0x04 << 2) | (3)
	return
}

type OP_XORI struct {
	opcodes.OP_XORI
}

func XORI(RD uint32, RS1 uint32, IMM12 int32) OP_XORI {
	return OP_XORI{
		opcodes.OP_XORI{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func (o OP_XORI) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return
	}

	r = r | RD | RS1 | IMM12 | (4 << 12) | (0x04 << 2) | (3)
	return
}

type OP_ORI struct {
	opcodes.OP_ORI
}

func ORI(RD uint32, RS1 uint32, IMM12 int32) OP_ORI {
	return OP_ORI{
		opcodes.OP_ORI{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func (o OP_ORI) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return
	}

	r = r | RD | RS1 | IMM12 | (6 << 12) | (0x04 << 2) | (3)
	return
}

type OP_ANDI struct {
	opcodes.OP_ANDI
}

func ANDI(RD uint32, RS1 uint32, IMM12 int32) OP_ANDI {
	return OP_ANDI{
		opcodes.OP_ANDI{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func (o OP_ANDI) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return
	}

	r = r | RD | RS1 | IMM12 | (7 << 12) | (0x04 << 2) | (3)
	return
}

type OP_ADD struct {
	opcodes.OP_ADD
}

func ADD(RD uint32, RS1 uint32, RS2 uint32) OP_ADD {
	return OP_ADD{
		opcodes.OP_ADD{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func (o OP_ADD) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}

	r = r | RD | RS1 | RS2 | (0 << 25) | (0 << 12) | (0x0C << 2) | (3)
	return
}

type OP_SUB struct {
	opcodes.OP_SUB
}

func SUB(RD uint32, RS1 uint32, RS2 uint32) OP_SUB {
	return OP_SUB{
		opcodes.OP_SUB{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func (o OP_SUB) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}

	r = r | RD | RS1 | RS2 | (32 << 25) | (0 << 12) | (0x0C << 2) | (3)
	return
}

type OP_SLL struct {
	opcodes.OP_SLL
}

func SLL(RD uint32, RS1 uint32, RS2 uint32) OP_SLL {
	return OP_SLL{
		opcodes.OP_SLL{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func (o OP_SLL) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}

	r = r | RD | RS1 | RS2 | (0 << 25) | (1 << 12) | (0x0C << 2) | (3)
	return
}

type OP_SLT struct {
	opcodes.OP_SLT
}

func SLT(RD uint32, RS1 uint32, RS2 uint32) OP_SLT {
	return OP_SLT{
		opcodes.OP_SLT{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func (o OP_SLT) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}

	r = r | RD | RS1 | RS2 | (0 << 25) | (2 << 12) | (0x0C << 2) | (3)
	return
}

type OP_SLTU struct {
	opcodes.OP_SLTU
}

func SLTU(RD uint32, RS1 uint32, RS2 uint32) OP_SLTU {
	return OP_SLTU{
		opcodes.OP_SLTU{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func (o OP_SLTU) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}

	r = r | RD | RS1 | RS2 | (0 << 25) | (3 << 12) | (0x0C << 2) | (3)
	return
}

type OP_XOR struct {
	opcodes.OP_XOR
}

func XOR(RD uint32, RS1 uint32, RS2 uint32) OP_XOR {
	return OP_XOR{
		opcodes.OP_XOR{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func (o OP_XOR) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}

	r = r | RD | RS1 | RS2 | (0 << 25) | (4 << 12) | (0x0C << 2) | (3)
	return
}

type OP_SRL struct {
	opcodes.OP_SRL
}

func SRL(RD uint32, RS1 uint32, RS2 uint32) OP_SRL {
	return OP_SRL{
		opcodes.OP_SRL{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func (o OP_SRL) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}

	r = r | RD | RS1 | RS2 | (0 << 25) | (5 << 12) | (0x0C << 2) | (3)
	return
}

type OP_SRA struct {
	opcodes.OP_SRA
}

func SRA(RD uint32, RS1 uint32, RS2 uint32) OP_SRA {
	return OP_SRA{
		opcodes.OP_SRA{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func (o OP_SRA) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}

	r = r | RD | RS1 | RS2 | (32 << 25) | (5 << 12) | (0x0C << 2) | (3)
	return
}

type OP_OR struct {
	opcodes.OP_OR
}

func OR(RD uint32, RS1 uint32, RS2 uint32) OP_OR {
	return OP_OR{
		opcodes.OP_OR{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func (o OP_OR) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}

	r = r | RD | RS1 | RS2 | (0 << 25) | (6 << 12) | (0x0C << 2) | (3)
	return
}

type OP_AND struct {
	opcodes.OP_AND
}

func AND(RD uint32, RS1 uint32, RS2 uint32) OP_AND {
	return OP_AND{
		opcodes.OP_AND{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func (o OP_AND) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return
	}

	r = r | RD | RS1 | RS2 | (0 << 25) | (7 << 12) | (0x0C << 2) | (3)
	return
}

type OP_FENCE struct {
	opcodes.OP_FENCE
}

func FENCE(FM uint32, PRED uint32, SUCC uint32, RS1 uint32, RD uint32) OP_FENCE {
	return OP_FENCE{
		opcodes.OP_FENCE{
			FM:   FM,
			PRED: PRED,
			SUCC: SUCC,
			RS1:  RS1,
			RD:   RD,
		},
	}
}

func (o OP_FENCE) Encode() (r uint32, err error) {
	FM, err := GEN_FM(o.FM)
	if err != nil {
		return
	}
	PRED, err := GEN_PRED(o.PRED)
	if err != nil {
		return
	}
	SUCC, err := GEN_SUCC(o.SUCC)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}

	r = r | FM | PRED | SUCC | RS1 | RD | (0 << 12) | (0x03 << 2) | (3)
	return
}

type OP_ECALL struct {
	opcodes.OP_ECALL
}

func ECALL() OP_ECALL {
	return OP_ECALL{
		opcodes.OP_ECALL{},
	}
}

func (o OP_ECALL) Encode() (r uint32, err error) {

	r = r | (0x000 << 20) | (0 << 7) | (0x1C << 2) | (3)
	return
}

type OP_EBREAK struct {
	opcodes.OP_EBREAK
}

func EBREAK() OP_EBREAK {
	return OP_EBREAK{
		opcodes.OP_EBREAK{},
	}
}

func (o OP_EBREAK) Encode() (r uint32, err error) {

	r = r | (0x001 << 20) | (0 << 7) | (0x1C << 2) | (3)
	return
}

type OP_SLLI struct {
	opcodes.OP_SLLI
}

func SLLI(RD uint32, RS1 uint32, SHAMTW uint32) OP_SLLI {
	return OP_SLLI{
		opcodes.OP_SLLI{
			RD:     RD,
			RS1:    RS1,
			SHAMTW: SHAMTW,
		},
	}
}

func (o OP_SLLI) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	SHAMTW, err := GEN_SHAMTW(o.SHAMTW)
	if err != nil {
		return
	}

	r = r | RD | RS1 | SHAMTW | (0 << 25) | (1 << 12) | (0x04 << 2) | (3)
	return
}

type OP_SRLI struct {
	opcodes.OP_SRLI
}

func SRLI(RD uint32, RS1 uint32, SHAMTW uint32) OP_SRLI {
	return OP_SRLI{
		opcodes.OP_SRLI{
			RD:     RD,
			RS1:    RS1,
			SHAMTW: SHAMTW,
		},
	}
}

func (o OP_SRLI) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	SHAMTW, err := GEN_SHAMTW(o.SHAMTW)
	if err != nil {
		return
	}

	r = r | RD | RS1 | SHAMTW | (0 << 25) | (5 << 12) | (0x04 << 2) | (3)
	return
}

type OP_SRAI struct {
	opcodes.OP_SRAI
}

func SRAI(RD uint32, RS1 uint32, SHAMTW uint32) OP_SRAI {
	return OP_SRAI{
		opcodes.OP_SRAI{
			RD:     RD,
			RS1:    RS1,
			SHAMTW: SHAMTW,
		},
	}
}

func (o OP_SRAI) Encode() (r uint32, err error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return
	}
	SHAMTW, err := GEN_SHAMTW(o.SHAMTW)
	if err != nil {
		return
	}

	r = r | RD | RS1 | SHAMTW | (32 << 25) | (5 << 12) | (0x04 << 2) | (3)
	return
}
