// AUTOGENERATED: DO NOT EDIT!
// Built from RISC-V ISA opcode definitions: https://github.com/riscv/riscv-opcodes

package assemble

import "github.com/hawkowl/biscuit/pkg/opcodes"

func EncodeLUI(o opcodes.OP_LUI) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	IMM20, err := GEN_IMM20(o.IMM20)
	if err != nil {
		return 0, err
	}
	return 0x00000037 | RD | IMM20, nil
}

func EncodeAUIPC(o opcodes.OP_AUIPC) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	IMM20, err := GEN_IMM20(o.IMM20)
	if err != nil {
		return 0, err
	}
	return 0x00000017 | RD | IMM20, nil
}

func EncodeJAL(o opcodes.OP_JAL) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	JIMM20, err := GEN_JIMM20(o.JIMM20)
	if err != nil {
		return 0, err
	}
	return 0x0000006F | RD | JIMM20, nil
}

func EncodeJALR(o opcodes.OP_JALR) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00000067 | RD | RS1 | IMM12, nil
}

func EncodeBEQ(o opcodes.OP_BEQ) (uint32, error) {
	BIMM12HI, err := GEN_BIMM12HI(o.BIMM12)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	BIMM12LO, err := GEN_BIMM12LO(o.BIMM12)
	if err != nil {
		return 0, err
	}
	return 0x00000063 | BIMM12HI | RS1 | RS2 | BIMM12LO, nil
}

func EncodeBNE(o opcodes.OP_BNE) (uint32, error) {
	BIMM12HI, err := GEN_BIMM12HI(o.BIMM12)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	BIMM12LO, err := GEN_BIMM12LO(o.BIMM12)
	if err != nil {
		return 0, err
	}
	return 0x00001063 | BIMM12HI | RS1 | RS2 | BIMM12LO, nil
}

func EncodeBLT(o opcodes.OP_BLT) (uint32, error) {
	BIMM12HI, err := GEN_BIMM12HI(o.BIMM12)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	BIMM12LO, err := GEN_BIMM12LO(o.BIMM12)
	if err != nil {
		return 0, err
	}
	return 0x00004063 | BIMM12HI | RS1 | RS2 | BIMM12LO, nil
}

func EncodeBGE(o opcodes.OP_BGE) (uint32, error) {
	BIMM12HI, err := GEN_BIMM12HI(o.BIMM12)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	BIMM12LO, err := GEN_BIMM12LO(o.BIMM12)
	if err != nil {
		return 0, err
	}
	return 0x00005063 | BIMM12HI | RS1 | RS2 | BIMM12LO, nil
}

func EncodeBLTU(o opcodes.OP_BLTU) (uint32, error) {
	BIMM12HI, err := GEN_BIMM12HI(o.BIMM12)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	BIMM12LO, err := GEN_BIMM12LO(o.BIMM12)
	if err != nil {
		return 0, err
	}
	return 0x00006063 | BIMM12HI | RS1 | RS2 | BIMM12LO, nil
}

func EncodeBGEU(o opcodes.OP_BGEU) (uint32, error) {
	BIMM12HI, err := GEN_BIMM12HI(o.BIMM12)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	BIMM12LO, err := GEN_BIMM12LO(o.BIMM12)
	if err != nil {
		return 0, err
	}
	return 0x00007063 | BIMM12HI | RS1 | RS2 | BIMM12LO, nil
}

func EncodeLB(o opcodes.OP_LB) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00000003 | RD | RS1 | IMM12, nil
}

func EncodeLH(o opcodes.OP_LH) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00001003 | RD | RS1 | IMM12, nil
}

func EncodeLW(o opcodes.OP_LW) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00002003 | RD | RS1 | IMM12, nil
}

func EncodeLBU(o opcodes.OP_LBU) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00004003 | RD | RS1 | IMM12, nil
}

func EncodeLHU(o opcodes.OP_LHU) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00005003 | RD | RS1 | IMM12, nil
}

func EncodeSB(o opcodes.OP_SB) (uint32, error) {
	IMM12HI, err := GEN_IMM12HI(o.IMM12)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	IMM12LO, err := GEN_IMM12LO(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00000023 | IMM12HI | RS1 | RS2 | IMM12LO, nil
}

func EncodeSH(o opcodes.OP_SH) (uint32, error) {
	IMM12HI, err := GEN_IMM12HI(o.IMM12)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	IMM12LO, err := GEN_IMM12LO(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00001023 | IMM12HI | RS1 | RS2 | IMM12LO, nil
}

func EncodeSW(o opcodes.OP_SW) (uint32, error) {
	IMM12HI, err := GEN_IMM12HI(o.IMM12)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	IMM12LO, err := GEN_IMM12LO(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00002023 | IMM12HI | RS1 | RS2 | IMM12LO, nil
}

func EncodeADDI(o opcodes.OP_ADDI) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00000013 | RD | RS1 | IMM12, nil
}

func EncodeSLTI(o opcodes.OP_SLTI) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00002013 | RD | RS1 | IMM12, nil
}

func EncodeSLTIU(o opcodes.OP_SLTIU) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00003013 | RD | RS1 | IMM12, nil
}

func EncodeXORI(o opcodes.OP_XORI) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00004013 | RD | RS1 | IMM12, nil
}

func EncodeORI(o opcodes.OP_ORI) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00006013 | RD | RS1 | IMM12, nil
}

func EncodeANDI(o opcodes.OP_ANDI) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	IMM12, err := GEN_IMM12(o.IMM12)
	if err != nil {
		return 0, err
	}
	return 0x00007013 | RD | RS1 | IMM12, nil
}

func EncodeADD(o opcodes.OP_ADD) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	return 0x00000033 | RD | RS1 | RS2, nil
}

func EncodeSUB(o opcodes.OP_SUB) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	return 0x40000033 | RD | RS1 | RS2, nil
}

func EncodeSLL(o opcodes.OP_SLL) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	return 0x00001033 | RD | RS1 | RS2, nil
}

func EncodeSLT(o opcodes.OP_SLT) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	return 0x00002033 | RD | RS1 | RS2, nil
}

func EncodeSLTU(o opcodes.OP_SLTU) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	return 0x00003033 | RD | RS1 | RS2, nil
}

func EncodeXOR(o opcodes.OP_XOR) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	return 0x00004033 | RD | RS1 | RS2, nil
}

func EncodeSRL(o opcodes.OP_SRL) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	return 0x00005033 | RD | RS1 | RS2, nil
}

func EncodeSRA(o opcodes.OP_SRA) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	return 0x40005033 | RD | RS1 | RS2, nil
}

func EncodeOR(o opcodes.OP_OR) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	return 0x00006033 | RD | RS1 | RS2, nil
}

func EncodeAND(o opcodes.OP_AND) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RS2, err := GEN_RS2(o.RS2)
	if err != nil {
		return 0, err
	}
	return 0x00007033 | RD | RS1 | RS2, nil
}

func EncodeFENCE(o opcodes.OP_FENCE) (uint32, error) {
	FM, err := GEN_FM(o.FM)
	if err != nil {
		return 0, err
	}
	PRED, err := GEN_PRED(o.PRED)
	if err != nil {
		return 0, err
	}
	SUCC, err := GEN_SUCC(o.SUCC)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	return 0x0000000F | FM | PRED | SUCC | RS1 | RD, nil
}

func EncodeECALL(o opcodes.OP_ECALL) (uint32, error) {
	return 0x00000073, nil
}

func EncodeEBREAK(o opcodes.OP_EBREAK) (uint32, error) {
	return 0x00100073, nil
}

func EncodeSLLI(o opcodes.OP_SLLI) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	SHAMTW, err := GEN_SHAMTW(o.SHAMTW)
	if err != nil {
		return 0, err
	}
	return 0x00001013 | RD | RS1 | SHAMTW, nil
}

func EncodeSRLI(o opcodes.OP_SRLI) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	SHAMTW, err := GEN_SHAMTW(o.SHAMTW)
	if err != nil {
		return 0, err
	}
	return 0x00005013 | RD | RS1 | SHAMTW, nil
}

func EncodeSRAI(o opcodes.OP_SRAI) (uint32, error) {
	RD, err := GEN_RD(o.RD)
	if err != nil {
		return 0, err
	}
	RS1, err := GEN_RS1(o.RS1)
	if err != nil {
		return 0, err
	}
	SHAMTW, err := GEN_SHAMTW(o.SHAMTW)
	if err != nil {
		return 0, err
	}
	return 0x40005013 | RD | RS1 | SHAMTW, nil
}
