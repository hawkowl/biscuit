// AUTOGENERATED: DO NOT EDIT!
// Built from RISC-V ISA opcode definitions: https://github.com/riscv/riscv-opcodes

package assemble

type OP_lui struct {
	RD    uint32
	IMM20 uint32
}

func (o OP_lui) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	imm20, err := GEN_imm20(o.IMM20)
	if err != nil {
		return
	}

	r = r | rd | imm20 | (0x0D << 2) | (3)
	return
}

type OP_auipc struct {
	RD    uint32
	IMM20 uint32
}

func (o OP_auipc) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	imm20, err := GEN_imm20(o.IMM20)
	if err != nil {
		return
	}

	r = r | rd | imm20 | (0x05 << 2) | (3)
	return
}

type OP_jal struct {
	RD     uint32
	JIMM20 uint32
}

func (o OP_jal) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	jimm20, err := GEN_jimm20(o.JIMM20)
	if err != nil {
		return
	}

	r = r | rd | jimm20 | (0x1b << 2) | (3)
	return
}

type OP_jalr struct {
	RS1   uint32
	IMM12 uint32
	RD    uint32
}

func (o OP_jalr) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	imm12, err := GEN_imm12(o.IMM12)
	if err != nil {
		return
	}

	r = r | rd | rs1 | imm12 | (0 << 12) | (0x19 << 2) | (3)
	return
}

type OP_beq struct {
	BIMM12 int32
	RS1    uint32
	RS2    uint32
}

func (o OP_beq) Encode() (r uint32, err error) {
	bimm12hi, err := GEN_bimm12hi(o.BIMM12)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}
	bimm12lo, err := GEN_bimm12lo(o.BIMM12)
	if err != nil {
		return
	}

	r = r | bimm12hi | rs1 | rs2 | bimm12lo | (0 << 12) | (0x18 << 2) | (3)
	return
}

type OP_bne struct {
	RS2    uint32
	BIMM12 int32
	RS1    uint32
}

func (o OP_bne) Encode() (r uint32, err error) {
	bimm12hi, err := GEN_bimm12hi(o.BIMM12)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}
	bimm12lo, err := GEN_bimm12lo(o.BIMM12)
	if err != nil {
		return
	}

	r = r | bimm12hi | rs1 | rs2 | bimm12lo | (1 << 12) | (0x18 << 2) | (3)
	return
}

type OP_blt struct {
	BIMM12 int32
	RS1    uint32
	RS2    uint32
}

func (o OP_blt) Encode() (r uint32, err error) {
	bimm12hi, err := GEN_bimm12hi(o.BIMM12)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}
	bimm12lo, err := GEN_bimm12lo(o.BIMM12)
	if err != nil {
		return
	}

	r = r | bimm12hi | rs1 | rs2 | bimm12lo | (4 << 12) | (0x18 << 2) | (3)
	return
}

type OP_bge struct {
	RS1    uint32
	RS2    uint32
	BIMM12 int32
}

func (o OP_bge) Encode() (r uint32, err error) {
	bimm12hi, err := GEN_bimm12hi(o.BIMM12)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}
	bimm12lo, err := GEN_bimm12lo(o.BIMM12)
	if err != nil {
		return
	}

	r = r | bimm12hi | rs1 | rs2 | bimm12lo | (5 << 12) | (0x18 << 2) | (3)
	return
}

type OP_bltu struct {
	BIMM12 int32
	RS1    uint32
	RS2    uint32
}

func (o OP_bltu) Encode() (r uint32, err error) {
	bimm12hi, err := GEN_bimm12hi(o.BIMM12)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}
	bimm12lo, err := GEN_bimm12lo(o.BIMM12)
	if err != nil {
		return
	}

	r = r | bimm12hi | rs1 | rs2 | bimm12lo | (6 << 12) | (0x18 << 2) | (3)
	return
}

type OP_bgeu struct {
	BIMM12 int32
	RS1    uint32
	RS2    uint32
}

func (o OP_bgeu) Encode() (r uint32, err error) {
	bimm12hi, err := GEN_bimm12hi(o.BIMM12)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}
	bimm12lo, err := GEN_bimm12lo(o.BIMM12)
	if err != nil {
		return
	}

	r = r | bimm12hi | rs1 | rs2 | bimm12lo | (7 << 12) | (0x18 << 2) | (3)
	return
}

type OP_lb struct {
	RS1   uint32
	IMM12 uint32
	RD    uint32
}

func (o OP_lb) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	imm12, err := GEN_imm12(o.IMM12)
	if err != nil {
		return
	}

	r = r | rd | rs1 | imm12 | (0 << 12) | (0x00 << 2) | (3)
	return
}

type OP_lh struct {
	RD    uint32
	RS1   uint32
	IMM12 uint32
}

func (o OP_lh) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	imm12, err := GEN_imm12(o.IMM12)
	if err != nil {
		return
	}

	r = r | rd | rs1 | imm12 | (1 << 12) | (0x00 << 2) | (3)
	return
}

type OP_lw struct {
	RD    uint32
	RS1   uint32
	IMM12 uint32
}

func (o OP_lw) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	imm12, err := GEN_imm12(o.IMM12)
	if err != nil {
		return
	}

	r = r | rd | rs1 | imm12 | (2 << 12) | (0x00 << 2) | (3)
	return
}

type OP_lbu struct {
	IMM12 uint32
	RD    uint32
	RS1   uint32
}

func (o OP_lbu) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	imm12, err := GEN_imm12(o.IMM12)
	if err != nil {
		return
	}

	r = r | rd | rs1 | imm12 | (4 << 12) | (0x00 << 2) | (3)
	return
}

type OP_lhu struct {
	RD    uint32
	RS1   uint32
	IMM12 uint32
}

func (o OP_lhu) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	imm12, err := GEN_imm12(o.IMM12)
	if err != nil {
		return
	}

	r = r | rd | rs1 | imm12 | (5 << 12) | (0x00 << 2) | (3)
	return
}

type OP_sb struct {
	IMM12 uint32
	RS1   uint32
	RS2   uint32
}

func (o OP_sb) Encode() (r uint32, err error) {
	imm12hi, err := GEN_imm12hi(o.IMM12)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}
	imm12lo, err := GEN_imm12lo(o.IMM12)
	if err != nil {
		return
	}

	r = r | imm12hi | rs1 | rs2 | imm12lo | (0 << 12) | (0x08 << 2) | (3)
	return
}

type OP_sh struct {
	RS2   uint32
	IMM12 uint32
	RS1   uint32
}

func (o OP_sh) Encode() (r uint32, err error) {
	imm12hi, err := GEN_imm12hi(o.IMM12)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}
	imm12lo, err := GEN_imm12lo(o.IMM12)
	if err != nil {
		return
	}

	r = r | imm12hi | rs1 | rs2 | imm12lo | (1 << 12) | (0x08 << 2) | (3)
	return
}

type OP_sw struct {
	IMM12 uint32
	RS1   uint32
	RS2   uint32
}

func (o OP_sw) Encode() (r uint32, err error) {
	imm12hi, err := GEN_imm12hi(o.IMM12)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}
	imm12lo, err := GEN_imm12lo(o.IMM12)
	if err != nil {
		return
	}

	r = r | imm12hi | rs1 | rs2 | imm12lo | (2 << 12) | (0x08 << 2) | (3)
	return
}

type OP_addi struct {
	RD    uint32
	RS1   uint32
	IMM12 uint32
}

func (o OP_addi) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	imm12, err := GEN_imm12(o.IMM12)
	if err != nil {
		return
	}

	r = r | rd | rs1 | imm12 | (0 << 12) | (0x04 << 2) | (3)
	return
}

type OP_slti struct {
	RS1   uint32
	IMM12 uint32
	RD    uint32
}

func (o OP_slti) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	imm12, err := GEN_imm12(o.IMM12)
	if err != nil {
		return
	}

	r = r | rd | rs1 | imm12 | (2 << 12) | (0x04 << 2) | (3)
	return
}

type OP_sltiu struct {
	RD    uint32
	RS1   uint32
	IMM12 uint32
}

func (o OP_sltiu) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	imm12, err := GEN_imm12(o.IMM12)
	if err != nil {
		return
	}

	r = r | rd | rs1 | imm12 | (3 << 12) | (0x04 << 2) | (3)
	return
}

type OP_xori struct {
	RD    uint32
	RS1   uint32
	IMM12 uint32
}

func (o OP_xori) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	imm12, err := GEN_imm12(o.IMM12)
	if err != nil {
		return
	}

	r = r | rd | rs1 | imm12 | (4 << 12) | (0x04 << 2) | (3)
	return
}

type OP_ori struct {
	RD    uint32
	RS1   uint32
	IMM12 uint32
}

func (o OP_ori) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	imm12, err := GEN_imm12(o.IMM12)
	if err != nil {
		return
	}

	r = r | rd | rs1 | imm12 | (6 << 12) | (0x04 << 2) | (3)
	return
}

type OP_andi struct {
	RD    uint32
	RS1   uint32
	IMM12 uint32
}

func (o OP_andi) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	imm12, err := GEN_imm12(o.IMM12)
	if err != nil {
		return
	}

	r = r | rd | rs1 | imm12 | (7 << 12) | (0x04 << 2) | (3)
	return
}

type OP_add struct {
	RD  uint32
	RS1 uint32
	RS2 uint32
}

func (o OP_add) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}

	r = r | rd | rs1 | rs2 | (0 << 25) | (0 << 12) | (0x0C << 2) | (3)
	return
}

type OP_sub struct {
	RD  uint32
	RS1 uint32
	RS2 uint32
}

func (o OP_sub) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}

	r = r | rd | rs1 | rs2 | (32 << 25) | (0 << 12) | (0x0C << 2) | (3)
	return
}

type OP_sll struct {
	RD  uint32
	RS1 uint32
	RS2 uint32
}

func (o OP_sll) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}

	r = r | rd | rs1 | rs2 | (0 << 25) | (1 << 12) | (0x0C << 2) | (3)
	return
}

type OP_slt struct {
	RD  uint32
	RS1 uint32
	RS2 uint32
}

func (o OP_slt) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}

	r = r | rd | rs1 | rs2 | (0 << 25) | (2 << 12) | (0x0C << 2) | (3)
	return
}

type OP_sltu struct {
	RS2 uint32
	RD  uint32
	RS1 uint32
}

func (o OP_sltu) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}

	r = r | rd | rs1 | rs2 | (0 << 25) | (3 << 12) | (0x0C << 2) | (3)
	return
}

type OP_xor struct {
	RD  uint32
	RS1 uint32
	RS2 uint32
}

func (o OP_xor) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}

	r = r | rd | rs1 | rs2 | (0 << 25) | (4 << 12) | (0x0C << 2) | (3)
	return
}

type OP_srl struct {
	RD  uint32
	RS1 uint32
	RS2 uint32
}

func (o OP_srl) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}

	r = r | rd | rs1 | rs2 | (0 << 25) | (5 << 12) | (0x0C << 2) | (3)
	return
}

type OP_sra struct {
	RD  uint32
	RS1 uint32
	RS2 uint32
}

func (o OP_sra) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}

	r = r | rd | rs1 | rs2 | (32 << 25) | (5 << 12) | (0x0C << 2) | (3)
	return
}

type OP_or struct {
	RD  uint32
	RS1 uint32
	RS2 uint32
}

func (o OP_or) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}

	r = r | rd | rs1 | rs2 | (0 << 25) | (6 << 12) | (0x0C << 2) | (3)
	return
}

type OP_and struct {
	RS2 uint32
	RD  uint32
	RS1 uint32
}

func (o OP_and) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rs2, err := GEN_rs2(o.RS2)
	if err != nil {
		return
	}

	r = r | rd | rs1 | rs2 | (0 << 25) | (7 << 12) | (0x0C << 2) | (3)
	return
}

type OP_fence struct {
	FM   uint32
	PRED uint32
	SUCC uint32
	RS1  uint32
	RD   uint32
}

func (o OP_fence) Encode() (r uint32, err error) {
	fm, err := GEN_fm(o.FM)
	if err != nil {
		return
	}
	pred, err := GEN_pred(o.PRED)
	if err != nil {
		return
	}
	succ, err := GEN_succ(o.SUCC)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}

	r = r | fm | pred | succ | rs1 | rd | (0 << 12) | (0x03 << 2) | (3)
	return
}

type OP_ecall struct {
}

func (o OP_ecall) Encode() (r uint32, err error) {

	r = r | (0x000 << 20) | (0 << 7) | (0x1C << 2) | (3)
	return
}

type OP_ebreak struct {
}

func (o OP_ebreak) Encode() (r uint32, err error) {

	r = r | (0x001 << 20) | (0 << 7) | (0x1C << 2) | (3)
	return
}

type OP_slli struct {
	RD     uint32
	RS1    uint32
	SHAMTW uint32
}

func (o OP_slli) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	shamtw, err := GEN_shamtw(o.SHAMTW)
	if err != nil {
		return
	}

	r = r | rd | rs1 | shamtw | (0 << 25) | (1 << 12) | (0x04 << 2) | (3)
	return
}

type OP_srli struct {
	RD     uint32
	RS1    uint32
	SHAMTW uint32
}

func (o OP_srli) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	shamtw, err := GEN_shamtw(o.SHAMTW)
	if err != nil {
		return
	}

	r = r | rd | rs1 | shamtw | (0 << 25) | (5 << 12) | (0x04 << 2) | (3)
	return
}

type OP_srai struct {
	RD     uint32
	RS1    uint32
	SHAMTW uint32
}

func (o OP_srai) Encode() (r uint32, err error) {
	rd, err := GEN_rd(o.RD)
	if err != nil {
		return
	}
	rs1, err := GEN_rs1(o.RS1)
	if err != nil {
		return
	}
	shamtw, err := GEN_shamtw(o.SHAMTW)
	if err != nil {
		return
	}

	r = r | rd | rs1 | shamtw | (32 << 25) | (5 << 12) | (0x04 << 2) | (3)
	return
}
