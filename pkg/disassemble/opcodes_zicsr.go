// AUTOGENERATED: DO NOT EDIT!
// Built from RISC-V ISA opcode definitions: https://github.com/riscv/riscv-opcodes

package disassemble

import (
	"fmt"
	"strings"

	"github.com/hawkowl/biscuit/pkg/debuginfo"
	"github.com/hawkowl/biscuit/pkg/opcodes"
)

type OP_CSRRW struct {
	opcodes.OP_CSRRW
	debug debuginfo.DebugInfo
}

var _ fmt.Stringer = OP_CSRRW{}

func (o OP_CSRRW) String() string {
	return strings.Join([]string{"CSRRW", o.rd(), o.rs1(), o.csr()}, " ")
}

func (o OP_CSRRW) rd() string {
	return fmt.Sprintf("rd=x%d", o.RD)
}

func (o OP_CSRRW) rs1() string {
	return fmt.Sprintf("rs1=x%d", o.RS1)
}

func (o OP_CSRRW) csr() string {
	if o.CSR == 0 {
		return "csr=0"
	} else {
		return fmt.Sprintf("csr=%#x (%d)", uint64(o.CSR), o.CSR)
	}
}

func (o OP_CSRRW) Opcode() opcodes.Opcode {
	return o.OP_CSRRW
}

func (o OP_CSRRW) DebugInfo() debuginfo.DebugInfo {
	return o.debug
}

func CSRRW(RD uint32, RS1 uint32, CSR uint32, debug debuginfo.DebugInfo) OP_CSRRW {

	return OP_CSRRW{
		OP_CSRRW: opcodes.OP_CSRRW{
			RD:  RD,
			RS1: RS1,
			CSR: CSR,
		},
		debug: debug,
	}
}

func DecodeCSRRW(inst uint32) OP_CSRRW {
	r := opcodes.OP_CSRRW{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.CSR = DEC_CSR(inst)
	return OP_CSRRW{
		OP_CSRRW: r,
	}
}

type OP_CSRRS struct {
	opcodes.OP_CSRRS
	debug debuginfo.DebugInfo
}

var _ fmt.Stringer = OP_CSRRS{}

func (o OP_CSRRS) String() string {
	return strings.Join([]string{"CSRRS", o.rd(), o.rs1(), o.csr()}, " ")
}

func (o OP_CSRRS) rd() string {
	return fmt.Sprintf("rd=x%d", o.RD)
}

func (o OP_CSRRS) rs1() string {
	return fmt.Sprintf("rs1=x%d", o.RS1)
}

func (o OP_CSRRS) csr() string {
	if o.CSR == 0 {
		return "csr=0"
	} else {
		return fmt.Sprintf("csr=%#x (%d)", uint64(o.CSR), o.CSR)
	}
}

func (o OP_CSRRS) Opcode() opcodes.Opcode {
	return o.OP_CSRRS
}

func (o OP_CSRRS) DebugInfo() debuginfo.DebugInfo {
	return o.debug
}

func CSRRS(RD uint32, RS1 uint32, CSR uint32, debug debuginfo.DebugInfo) OP_CSRRS {

	return OP_CSRRS{
		OP_CSRRS: opcodes.OP_CSRRS{
			RD:  RD,
			RS1: RS1,
			CSR: CSR,
		},
		debug: debug,
	}
}

func DecodeCSRRS(inst uint32) OP_CSRRS {
	r := opcodes.OP_CSRRS{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.CSR = DEC_CSR(inst)
	return OP_CSRRS{
		OP_CSRRS: r,
	}
}

type OP_CSRRC struct {
	opcodes.OP_CSRRC
	debug debuginfo.DebugInfo
}

var _ fmt.Stringer = OP_CSRRC{}

func (o OP_CSRRC) String() string {
	return strings.Join([]string{"CSRRC", o.rd(), o.rs1(), o.csr()}, " ")
}

func (o OP_CSRRC) rd() string {
	return fmt.Sprintf("rd=x%d", o.RD)
}

func (o OP_CSRRC) rs1() string {
	return fmt.Sprintf("rs1=x%d", o.RS1)
}

func (o OP_CSRRC) csr() string {
	if o.CSR == 0 {
		return "csr=0"
	} else {
		return fmt.Sprintf("csr=%#x (%d)", uint64(o.CSR), o.CSR)
	}
}

func (o OP_CSRRC) Opcode() opcodes.Opcode {
	return o.OP_CSRRC
}

func (o OP_CSRRC) DebugInfo() debuginfo.DebugInfo {
	return o.debug
}

func CSRRC(RD uint32, RS1 uint32, CSR uint32, debug debuginfo.DebugInfo) OP_CSRRC {

	return OP_CSRRC{
		OP_CSRRC: opcodes.OP_CSRRC{
			RD:  RD,
			RS1: RS1,
			CSR: CSR,
		},
		debug: debug,
	}
}

func DecodeCSRRC(inst uint32) OP_CSRRC {
	r := opcodes.OP_CSRRC{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.CSR = DEC_CSR(inst)
	return OP_CSRRC{
		OP_CSRRC: r,
	}
}

type OP_CSRRWI struct {
	opcodes.OP_CSRRWI
	debug debuginfo.DebugInfo
}

var _ fmt.Stringer = OP_CSRRWI{}

func (o OP_CSRRWI) String() string {
	return strings.Join([]string{"CSRRWI", o.rd(), o.csr(), o.zimm()}, " ")
}

func (o OP_CSRRWI) rd() string {
	return fmt.Sprintf("rd=x%d", o.RD)
}

func (o OP_CSRRWI) csr() string {
	if o.CSR == 0 {
		return "csr=0"
	} else {
		return fmt.Sprintf("csr=%#x (%d)", uint64(o.CSR), o.CSR)
	}
}

func (o OP_CSRRWI) zimm() string {
	if o.ZIMM == 0 {
		return "zimm=0"
	} else {
		return fmt.Sprintf("zimm=%#x (%d)", uint64(o.ZIMM), o.ZIMM)
	}
}

func (o OP_CSRRWI) Opcode() opcodes.Opcode {
	return o.OP_CSRRWI
}

func (o OP_CSRRWI) DebugInfo() debuginfo.DebugInfo {
	return o.debug
}

func CSRRWI(RD uint32, CSR uint32, ZIMM uint32, debug debuginfo.DebugInfo) OP_CSRRWI {

	return OP_CSRRWI{
		OP_CSRRWI: opcodes.OP_CSRRWI{
			RD:   RD,
			CSR:  CSR,
			ZIMM: ZIMM,
		},
		debug: debug,
	}
}

func DecodeCSRRWI(inst uint32) OP_CSRRWI {
	r := opcodes.OP_CSRRWI{}

	r.RD = DEC_RD(inst)
	r.CSR = DEC_CSR(inst)
	r.ZIMM = DEC_ZIMM(inst)
	return OP_CSRRWI{
		OP_CSRRWI: r,
	}
}

type OP_CSRRSI struct {
	opcodes.OP_CSRRSI
	debug debuginfo.DebugInfo
}

var _ fmt.Stringer = OP_CSRRSI{}

func (o OP_CSRRSI) String() string {
	return strings.Join([]string{"CSRRSI", o.rd(), o.csr(), o.zimm()}, " ")
}

func (o OP_CSRRSI) rd() string {
	return fmt.Sprintf("rd=x%d", o.RD)
}

func (o OP_CSRRSI) csr() string {
	if o.CSR == 0 {
		return "csr=0"
	} else {
		return fmt.Sprintf("csr=%#x (%d)", uint64(o.CSR), o.CSR)
	}
}

func (o OP_CSRRSI) zimm() string {
	if o.ZIMM == 0 {
		return "zimm=0"
	} else {
		return fmt.Sprintf("zimm=%#x (%d)", uint64(o.ZIMM), o.ZIMM)
	}
}

func (o OP_CSRRSI) Opcode() opcodes.Opcode {
	return o.OP_CSRRSI
}

func (o OP_CSRRSI) DebugInfo() debuginfo.DebugInfo {
	return o.debug
}

func CSRRSI(RD uint32, CSR uint32, ZIMM uint32, debug debuginfo.DebugInfo) OP_CSRRSI {

	return OP_CSRRSI{
		OP_CSRRSI: opcodes.OP_CSRRSI{
			RD:   RD,
			CSR:  CSR,
			ZIMM: ZIMM,
		},
		debug: debug,
	}
}

func DecodeCSRRSI(inst uint32) OP_CSRRSI {
	r := opcodes.OP_CSRRSI{}

	r.RD = DEC_RD(inst)
	r.CSR = DEC_CSR(inst)
	r.ZIMM = DEC_ZIMM(inst)
	return OP_CSRRSI{
		OP_CSRRSI: r,
	}
}

type OP_CSRRCI struct {
	opcodes.OP_CSRRCI
	debug debuginfo.DebugInfo
}

var _ fmt.Stringer = OP_CSRRCI{}

func (o OP_CSRRCI) String() string {
	return strings.Join([]string{"CSRRCI", o.rd(), o.csr(), o.zimm()}, " ")
}

func (o OP_CSRRCI) rd() string {
	return fmt.Sprintf("rd=x%d", o.RD)
}

func (o OP_CSRRCI) csr() string {
	if o.CSR == 0 {
		return "csr=0"
	} else {
		return fmt.Sprintf("csr=%#x (%d)", uint64(o.CSR), o.CSR)
	}
}

func (o OP_CSRRCI) zimm() string {
	if o.ZIMM == 0 {
		return "zimm=0"
	} else {
		return fmt.Sprintf("zimm=%#x (%d)", uint64(o.ZIMM), o.ZIMM)
	}
}

func (o OP_CSRRCI) Opcode() opcodes.Opcode {
	return o.OP_CSRRCI
}

func (o OP_CSRRCI) DebugInfo() debuginfo.DebugInfo {
	return o.debug
}

func CSRRCI(RD uint32, CSR uint32, ZIMM uint32, debug debuginfo.DebugInfo) OP_CSRRCI {

	return OP_CSRRCI{
		OP_CSRRCI: opcodes.OP_CSRRCI{
			RD:   RD,
			CSR:  CSR,
			ZIMM: ZIMM,
		},
		debug: debug,
	}
}

func DecodeCSRRCI(inst uint32) OP_CSRRCI {
	r := opcodes.OP_CSRRCI{}

	r.RD = DEC_RD(inst)
	r.CSR = DEC_CSR(inst)
	r.ZIMM = DEC_ZIMM(inst)
	return OP_CSRRCI{
		OP_CSRRCI: r,
	}
}
