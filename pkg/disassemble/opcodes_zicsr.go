// AUTOGENERATED: DO NOT EDIT!
// Built from RISC-V ISA opcode definitions: https://github.com/riscv/riscv-opcodes

package disassemble

import "github.com/hawkowl/biscuit/pkg/opcodes"

type OP_CSRRW struct {
	opcodes.OP_CSRRW
}

func CSRRW(RD uint32, RS1 uint32, CSR uint32, debug DebugInfo) OP_CSRRW {
	return OP_CSRRW{
		opcodes.OP_CSRRW{
			RD:  RD,
			RS1: RS1,
			CSR: CSR,
		},
	}
}

func DecodeCSRRW(inst uint32) OP_CSRRW {
	r := opcodes.OP_CSRRW{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.CSR = DEC_CSR(inst)
	return OP_CSRRW{
		OP_CSRRW: r,
	}
}

type OP_CSRRS struct {
	opcodes.OP_CSRRS
}

func CSRRS(RD uint32, RS1 uint32, CSR uint32, debug DebugInfo) OP_CSRRS {
	return OP_CSRRS{
		opcodes.OP_CSRRS{
			RD:  RD,
			RS1: RS1,
			CSR: CSR,
		},
	}
}

func DecodeCSRRS(inst uint32) OP_CSRRS {
	r := opcodes.OP_CSRRS{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.CSR = DEC_CSR(inst)
	return OP_CSRRS{
		OP_CSRRS: r,
	}
}

type OP_CSRRC struct {
	opcodes.OP_CSRRC
}

func CSRRC(RD uint32, RS1 uint32, CSR uint32, debug DebugInfo) OP_CSRRC {
	return OP_CSRRC{
		opcodes.OP_CSRRC{
			RD:  RD,
			RS1: RS1,
			CSR: CSR,
		},
	}
}

func DecodeCSRRC(inst uint32) OP_CSRRC {
	r := opcodes.OP_CSRRC{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.CSR = DEC_CSR(inst)
	return OP_CSRRC{
		OP_CSRRC: r,
	}
}

type OP_CSRRWI struct {
	opcodes.OP_CSRRWI
}

func CSRRWI(RD uint32, CSR uint32, ZIMM uint32, debug DebugInfo) OP_CSRRWI {
	return OP_CSRRWI{
		opcodes.OP_CSRRWI{
			RD:   RD,
			CSR:  CSR,
			ZIMM: ZIMM,
		},
	}
}

func DecodeCSRRWI(inst uint32) OP_CSRRWI {
	r := opcodes.OP_CSRRWI{}

	r.RD = DEC_RD(inst)
	r.CSR = DEC_CSR(inst)
	r.ZIMM = DEC_ZIMM(inst)
	return OP_CSRRWI{
		OP_CSRRWI: r,
	}
}

type OP_CSRRSI struct {
	opcodes.OP_CSRRSI
}

func CSRRSI(RD uint32, CSR uint32, ZIMM uint32, debug DebugInfo) OP_CSRRSI {
	return OP_CSRRSI{
		opcodes.OP_CSRRSI{
			RD:   RD,
			CSR:  CSR,
			ZIMM: ZIMM,
		},
	}
}

func DecodeCSRRSI(inst uint32) OP_CSRRSI {
	r := opcodes.OP_CSRRSI{}

	r.RD = DEC_RD(inst)
	r.CSR = DEC_CSR(inst)
	r.ZIMM = DEC_ZIMM(inst)
	return OP_CSRRSI{
		OP_CSRRSI: r,
	}
}

type OP_CSRRCI struct {
	opcodes.OP_CSRRCI
}

func CSRRCI(RD uint32, CSR uint32, ZIMM uint32, debug DebugInfo) OP_CSRRCI {
	return OP_CSRRCI{
		opcodes.OP_CSRRCI{
			RD:   RD,
			CSR:  CSR,
			ZIMM: ZIMM,
		},
	}
}

func DecodeCSRRCI(inst uint32) OP_CSRRCI {
	r := opcodes.OP_CSRRCI{}

	r.RD = DEC_RD(inst)
	r.CSR = DEC_CSR(inst)
	r.ZIMM = DEC_ZIMM(inst)
	return OP_CSRRCI{
		OP_CSRRCI: r,
	}
}
