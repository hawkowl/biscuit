// AUTOGENERATED: DO NOT EDIT!
// Built from RISC-V ISA opcode definitions: https://github.com/riscv/riscv-opcodes

package disassemble

import (
	"fmt"
	"strings"

	"github.com/hawkowl/biscuit/pkg/debuginfo"
	"github.com/hawkowl/biscuit/pkg/opcodes"
)

type OP_SFENCE_VMA struct {
	opcodes.OP_SFENCE_VMA
	debug debuginfo.DebugInfo
}

var _ fmt.Stringer = OP_SFENCE_VMA{}

func (o OP_SFENCE_VMA) String() string {
	return strings.Join([]string{"SFENCE_VMA", o.rs1(), o.rs2()}, " ")
}

func (o OP_SFENCE_VMA) rs1() string {
	return fmt.Sprintf("rs1=x%d", o.RS1)
}

func (o OP_SFENCE_VMA) rs2() string {
	return fmt.Sprintf("rs2=x%d", o.RS2)
}

func (o OP_SFENCE_VMA) Opcode() opcodes.Opcode {
	return o.OP_SFENCE_VMA
}

func (o OP_SFENCE_VMA) DebugInfo() debuginfo.DebugInfo {
	return o.debug
}

func SFENCE_VMA(RS1 uint32, RS2 uint32, debug debuginfo.DebugInfo) OP_SFENCE_VMA {

	return OP_SFENCE_VMA{
		OP_SFENCE_VMA: opcodes.OP_SFENCE_VMA{
			RS1: RS1,
			RS2: RS2,
		},
		debug: debug,
	}
}

func DecodeSFENCE_VMA(inst uint32) OP_SFENCE_VMA {
	r := opcodes.OP_SFENCE_VMA{}

	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	return OP_SFENCE_VMA{
		OP_SFENCE_VMA: r,
	}
}

type OP_SRET struct {
	opcodes.OP_SRET
	debug debuginfo.DebugInfo
}

var _ fmt.Stringer = OP_SRET{}

func (o OP_SRET) String() string {
	return strings.Join([]string{"SRET"}, " ")
}

func (o OP_SRET) Opcode() opcodes.Opcode {
	return o.OP_SRET
}

func (o OP_SRET) DebugInfo() debuginfo.DebugInfo {
	return o.debug
}

func SRET(debug debuginfo.DebugInfo) OP_SRET {

	return OP_SRET{
		OP_SRET: opcodes.OP_SRET{},
		debug:   debug,
	}
}

func DecodeSRET(inst uint32) OP_SRET {
	r := opcodes.OP_SRET{}

	return OP_SRET{
		OP_SRET: r,
	}
}
