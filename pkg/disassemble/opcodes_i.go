// AUTOGENERATED: DO NOT EDIT!
// Built from RISC-V ISA opcode definitions: https://github.com/riscv/riscv-opcodes

package disassemble

import "github.com/hawkowl/biscuit/pkg/opcodes"

type OP_LUI struct {
	opcodes.OP_LUI
}

func LUI(RD uint32, IMM20 uint32, debug DebugInfo) OP_LUI {
	return OP_LUI{
		opcodes.OP_LUI{
			RD:    RD,
			IMM20: IMM20,
		},
	}
}

func DecodeLUI(inst uint32) OP_LUI {
	r := opcodes.OP_LUI{}

	r.RD = DEC_RD(inst)
	r.IMM20 = DEC_IMM20(inst)
	return OP_LUI{
		OP_LUI: r,
	}
}

type OP_AUIPC struct {
	opcodes.OP_AUIPC
}

func AUIPC(RD uint32, IMM20 uint32, debug DebugInfo) OP_AUIPC {
	return OP_AUIPC{
		opcodes.OP_AUIPC{
			RD:    RD,
			IMM20: IMM20,
		},
	}
}

func DecodeAUIPC(inst uint32) OP_AUIPC {
	r := opcodes.OP_AUIPC{}

	r.RD = DEC_RD(inst)
	r.IMM20 = DEC_IMM20(inst)
	return OP_AUIPC{
		OP_AUIPC: r,
	}
}

type OP_JAL struct {
	opcodes.OP_JAL
}

func JAL(RD uint32, JIMM20 int32, debug DebugInfo) OP_JAL {
	return OP_JAL{
		opcodes.OP_JAL{
			RD:     RD,
			JIMM20: JIMM20,
		},
	}
}

func DecodeJAL(inst uint32) OP_JAL {
	r := opcodes.OP_JAL{}

	r.RD = DEC_RD(inst)
	r.JIMM20 = DEC_JIMM20(inst)
	return OP_JAL{
		OP_JAL: r,
	}
}

type OP_JALR struct {
	opcodes.OP_JALR
}

func JALR(RD uint32, RS1 uint32, IMM12 int32, debug DebugInfo) OP_JALR {
	return OP_JALR{
		opcodes.OP_JALR{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func DecodeJALR(inst uint32) OP_JALR {
	r := opcodes.OP_JALR{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.IMM12 = DEC_IMM12(inst)
	return OP_JALR{
		OP_JALR: r,
	}
}

type OP_BEQ struct {
	opcodes.OP_BEQ
}

func BEQ(BIMM12 int32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_BEQ {
	return OP_BEQ{
		opcodes.OP_BEQ{
			BIMM12: BIMM12,
			RS1:    RS1,
			RS2:    RS2,
		},
	}
}

func DecodeBEQ(inst uint32) OP_BEQ {
	r := opcodes.OP_BEQ{}

	r.BIMM12 = DEC_BIMM12(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	r.BIMM12 = DEC_BIMM12(inst)
	return OP_BEQ{
		OP_BEQ: r,
	}
}

type OP_BNE struct {
	opcodes.OP_BNE
}

func BNE(BIMM12 int32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_BNE {
	return OP_BNE{
		opcodes.OP_BNE{
			BIMM12: BIMM12,
			RS1:    RS1,
			RS2:    RS2,
		},
	}
}

func DecodeBNE(inst uint32) OP_BNE {
	r := opcodes.OP_BNE{}

	r.BIMM12 = DEC_BIMM12(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	r.BIMM12 = DEC_BIMM12(inst)
	return OP_BNE{
		OP_BNE: r,
	}
}

type OP_BLT struct {
	opcodes.OP_BLT
}

func BLT(BIMM12 int32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_BLT {
	return OP_BLT{
		opcodes.OP_BLT{
			BIMM12: BIMM12,
			RS1:    RS1,
			RS2:    RS2,
		},
	}
}

func DecodeBLT(inst uint32) OP_BLT {
	r := opcodes.OP_BLT{}

	r.BIMM12 = DEC_BIMM12(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	r.BIMM12 = DEC_BIMM12(inst)
	return OP_BLT{
		OP_BLT: r,
	}
}

type OP_BGE struct {
	opcodes.OP_BGE
}

func BGE(BIMM12 int32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_BGE {
	return OP_BGE{
		opcodes.OP_BGE{
			BIMM12: BIMM12,
			RS1:    RS1,
			RS2:    RS2,
		},
	}
}

func DecodeBGE(inst uint32) OP_BGE {
	r := opcodes.OP_BGE{}

	r.BIMM12 = DEC_BIMM12(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	r.BIMM12 = DEC_BIMM12(inst)
	return OP_BGE{
		OP_BGE: r,
	}
}

type OP_BLTU struct {
	opcodes.OP_BLTU
}

func BLTU(BIMM12 int32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_BLTU {
	return OP_BLTU{
		opcodes.OP_BLTU{
			BIMM12: BIMM12,
			RS1:    RS1,
			RS2:    RS2,
		},
	}
}

func DecodeBLTU(inst uint32) OP_BLTU {
	r := opcodes.OP_BLTU{}

	r.BIMM12 = DEC_BIMM12(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	r.BIMM12 = DEC_BIMM12(inst)
	return OP_BLTU{
		OP_BLTU: r,
	}
}

type OP_BGEU struct {
	opcodes.OP_BGEU
}

func BGEU(BIMM12 int32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_BGEU {
	return OP_BGEU{
		opcodes.OP_BGEU{
			BIMM12: BIMM12,
			RS1:    RS1,
			RS2:    RS2,
		},
	}
}

func DecodeBGEU(inst uint32) OP_BGEU {
	r := opcodes.OP_BGEU{}

	r.BIMM12 = DEC_BIMM12(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	r.BIMM12 = DEC_BIMM12(inst)
	return OP_BGEU{
		OP_BGEU: r,
	}
}

type OP_LB struct {
	opcodes.OP_LB
}

func LB(RD uint32, RS1 uint32, IMM12 int32, debug DebugInfo) OP_LB {
	return OP_LB{
		opcodes.OP_LB{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func DecodeLB(inst uint32) OP_LB {
	r := opcodes.OP_LB{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.IMM12 = DEC_IMM12(inst)
	return OP_LB{
		OP_LB: r,
	}
}

type OP_LH struct {
	opcodes.OP_LH
}

func LH(RD uint32, RS1 uint32, IMM12 int32, debug DebugInfo) OP_LH {
	return OP_LH{
		opcodes.OP_LH{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func DecodeLH(inst uint32) OP_LH {
	r := opcodes.OP_LH{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.IMM12 = DEC_IMM12(inst)
	return OP_LH{
		OP_LH: r,
	}
}

type OP_LW struct {
	opcodes.OP_LW
}

func LW(RD uint32, RS1 uint32, IMM12 int32, debug DebugInfo) OP_LW {
	return OP_LW{
		opcodes.OP_LW{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func DecodeLW(inst uint32) OP_LW {
	r := opcodes.OP_LW{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.IMM12 = DEC_IMM12(inst)
	return OP_LW{
		OP_LW: r,
	}
}

type OP_LBU struct {
	opcodes.OP_LBU
}

func LBU(RD uint32, RS1 uint32, IMM12 int32, debug DebugInfo) OP_LBU {
	return OP_LBU{
		opcodes.OP_LBU{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func DecodeLBU(inst uint32) OP_LBU {
	r := opcodes.OP_LBU{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.IMM12 = DEC_IMM12(inst)
	return OP_LBU{
		OP_LBU: r,
	}
}

type OP_LHU struct {
	opcodes.OP_LHU
}

func LHU(RD uint32, RS1 uint32, IMM12 int32, debug DebugInfo) OP_LHU {
	return OP_LHU{
		opcodes.OP_LHU{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func DecodeLHU(inst uint32) OP_LHU {
	r := opcodes.OP_LHU{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.IMM12 = DEC_IMM12(inst)
	return OP_LHU{
		OP_LHU: r,
	}
}

type OP_SB struct {
	opcodes.OP_SB
}

func SB(IMM12 int32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_SB {
	return OP_SB{
		opcodes.OP_SB{
			IMM12: IMM12,
			RS1:   RS1,
			RS2:   RS2,
		},
	}
}

func DecodeSB(inst uint32) OP_SB {
	r := opcodes.OP_SB{}

	r.IMM12 = DEC_IMM12HILO(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)

	return OP_SB{
		OP_SB: r,
	}
}

type OP_SH struct {
	opcodes.OP_SH
}

func SH(IMM12 int32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_SH {
	return OP_SH{
		opcodes.OP_SH{
			IMM12: IMM12,
			RS1:   RS1,
			RS2:   RS2,
		},
	}
}

func DecodeSH(inst uint32) OP_SH {
	r := opcodes.OP_SH{}

	r.IMM12 = DEC_IMM12HILO(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)

	return OP_SH{
		OP_SH: r,
	}
}

type OP_SW struct {
	opcodes.OP_SW
}

func SW(IMM12 int32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_SW {
	return OP_SW{
		opcodes.OP_SW{
			IMM12: IMM12,
			RS1:   RS1,
			RS2:   RS2,
		},
	}
}

func DecodeSW(inst uint32) OP_SW {
	r := opcodes.OP_SW{}

	r.IMM12 = DEC_IMM12HILO(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)

	return OP_SW{
		OP_SW: r,
	}
}

type OP_ADDI struct {
	opcodes.OP_ADDI
}

func ADDI(RD uint32, RS1 uint32, IMM12 int32, debug DebugInfo) OP_ADDI {
	return OP_ADDI{
		opcodes.OP_ADDI{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func DecodeADDI(inst uint32) OP_ADDI {
	r := opcodes.OP_ADDI{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.IMM12 = DEC_IMM12(inst)
	return OP_ADDI{
		OP_ADDI: r,
	}
}

type OP_SLTI struct {
	opcodes.OP_SLTI
}

func SLTI(RD uint32, RS1 uint32, IMM12 int32, debug DebugInfo) OP_SLTI {
	return OP_SLTI{
		opcodes.OP_SLTI{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func DecodeSLTI(inst uint32) OP_SLTI {
	r := opcodes.OP_SLTI{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.IMM12 = DEC_IMM12(inst)
	return OP_SLTI{
		OP_SLTI: r,
	}
}

type OP_SLTIU struct {
	opcodes.OP_SLTIU
}

func SLTIU(RD uint32, RS1 uint32, IMM12 int32, debug DebugInfo) OP_SLTIU {
	return OP_SLTIU{
		opcodes.OP_SLTIU{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func DecodeSLTIU(inst uint32) OP_SLTIU {
	r := opcodes.OP_SLTIU{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.IMM12 = DEC_IMM12(inst)
	return OP_SLTIU{
		OP_SLTIU: r,
	}
}

type OP_XORI struct {
	opcodes.OP_XORI
}

func XORI(RD uint32, RS1 uint32, IMM12 int32, debug DebugInfo) OP_XORI {
	return OP_XORI{
		opcodes.OP_XORI{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func DecodeXORI(inst uint32) OP_XORI {
	r := opcodes.OP_XORI{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.IMM12 = DEC_IMM12(inst)
	return OP_XORI{
		OP_XORI: r,
	}
}

type OP_ORI struct {
	opcodes.OP_ORI
}

func ORI(RD uint32, RS1 uint32, IMM12 int32, debug DebugInfo) OP_ORI {
	return OP_ORI{
		opcodes.OP_ORI{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func DecodeORI(inst uint32) OP_ORI {
	r := opcodes.OP_ORI{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.IMM12 = DEC_IMM12(inst)
	return OP_ORI{
		OP_ORI: r,
	}
}

type OP_ANDI struct {
	opcodes.OP_ANDI
}

func ANDI(RD uint32, RS1 uint32, IMM12 int32, debug DebugInfo) OP_ANDI {
	return OP_ANDI{
		opcodes.OP_ANDI{
			RD:    RD,
			RS1:   RS1,
			IMM12: IMM12,
		},
	}
}

func DecodeANDI(inst uint32) OP_ANDI {
	r := opcodes.OP_ANDI{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.IMM12 = DEC_IMM12(inst)
	return OP_ANDI{
		OP_ANDI: r,
	}
}

type OP_ADD struct {
	opcodes.OP_ADD
}

func ADD(RD uint32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_ADD {
	return OP_ADD{
		opcodes.OP_ADD{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func DecodeADD(inst uint32) OP_ADD {
	r := opcodes.OP_ADD{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	return OP_ADD{
		OP_ADD: r,
	}
}

type OP_SUB struct {
	opcodes.OP_SUB
}

func SUB(RD uint32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_SUB {
	return OP_SUB{
		opcodes.OP_SUB{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func DecodeSUB(inst uint32) OP_SUB {
	r := opcodes.OP_SUB{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	return OP_SUB{
		OP_SUB: r,
	}
}

type OP_SLL struct {
	opcodes.OP_SLL
}

func SLL(RD uint32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_SLL {
	return OP_SLL{
		opcodes.OP_SLL{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func DecodeSLL(inst uint32) OP_SLL {
	r := opcodes.OP_SLL{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	return OP_SLL{
		OP_SLL: r,
	}
}

type OP_SLT struct {
	opcodes.OP_SLT
}

func SLT(RD uint32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_SLT {
	return OP_SLT{
		opcodes.OP_SLT{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func DecodeSLT(inst uint32) OP_SLT {
	r := opcodes.OP_SLT{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	return OP_SLT{
		OP_SLT: r,
	}
}

type OP_SLTU struct {
	opcodes.OP_SLTU
}

func SLTU(RD uint32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_SLTU {
	return OP_SLTU{
		opcodes.OP_SLTU{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func DecodeSLTU(inst uint32) OP_SLTU {
	r := opcodes.OP_SLTU{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	return OP_SLTU{
		OP_SLTU: r,
	}
}

type OP_XOR struct {
	opcodes.OP_XOR
}

func XOR(RD uint32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_XOR {
	return OP_XOR{
		opcodes.OP_XOR{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func DecodeXOR(inst uint32) OP_XOR {
	r := opcodes.OP_XOR{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	return OP_XOR{
		OP_XOR: r,
	}
}

type OP_SRL struct {
	opcodes.OP_SRL
}

func SRL(RD uint32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_SRL {
	return OP_SRL{
		opcodes.OP_SRL{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func DecodeSRL(inst uint32) OP_SRL {
	r := opcodes.OP_SRL{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	return OP_SRL{
		OP_SRL: r,
	}
}

type OP_SRA struct {
	opcodes.OP_SRA
}

func SRA(RD uint32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_SRA {
	return OP_SRA{
		opcodes.OP_SRA{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func DecodeSRA(inst uint32) OP_SRA {
	r := opcodes.OP_SRA{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	return OP_SRA{
		OP_SRA: r,
	}
}

type OP_OR struct {
	opcodes.OP_OR
}

func OR(RD uint32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_OR {
	return OP_OR{
		opcodes.OP_OR{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func DecodeOR(inst uint32) OP_OR {
	r := opcodes.OP_OR{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	return OP_OR{
		OP_OR: r,
	}
}

type OP_AND struct {
	opcodes.OP_AND
}

func AND(RD uint32, RS1 uint32, RS2 uint32, debug DebugInfo) OP_AND {
	return OP_AND{
		opcodes.OP_AND{
			RD:  RD,
			RS1: RS1,
			RS2: RS2,
		},
	}
}

func DecodeAND(inst uint32) OP_AND {
	r := opcodes.OP_AND{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.RS2 = DEC_RS2(inst)
	return OP_AND{
		OP_AND: r,
	}
}

type OP_FENCE struct {
	opcodes.OP_FENCE
}

func FENCE(FM uint32, PRED uint32, SUCC uint32, RS1 uint32, RD uint32, debug DebugInfo) OP_FENCE {
	return OP_FENCE{
		opcodes.OP_FENCE{
			FM:   FM,
			PRED: PRED,
			SUCC: SUCC,
			RS1:  RS1,
			RD:   RD,
		},
	}
}

func DecodeFENCE(inst uint32) OP_FENCE {
	r := opcodes.OP_FENCE{}

	r.FM = DEC_FM(inst)
	r.PRED = DEC_PRED(inst)
	r.SUCC = DEC_SUCC(inst)
	r.RS1 = DEC_RS1(inst)
	r.RD = DEC_RD(inst)
	return OP_FENCE{
		OP_FENCE: r,
	}
}

type OP_ECALL struct {
	opcodes.OP_ECALL
}

func ECALL(debug DebugInfo) OP_ECALL {
	return OP_ECALL{
		opcodes.OP_ECALL{},
	}
}

func DecodeECALL(inst uint32) OP_ECALL {
	r := opcodes.OP_ECALL{}

	return OP_ECALL{
		OP_ECALL: r,
	}
}

type OP_EBREAK struct {
	opcodes.OP_EBREAK
}

func EBREAK(debug DebugInfo) OP_EBREAK {
	return OP_EBREAK{
		opcodes.OP_EBREAK{},
	}
}

func DecodeEBREAK(inst uint32) OP_EBREAK {
	r := opcodes.OP_EBREAK{}

	return OP_EBREAK{
		OP_EBREAK: r,
	}
}

type OP_SLLI struct {
	opcodes.OP_SLLI
}

func SLLI(RD uint32, RS1 uint32, SHAMTW uint32, debug DebugInfo) OP_SLLI {
	return OP_SLLI{
		opcodes.OP_SLLI{
			RD:     RD,
			RS1:    RS1,
			SHAMTW: SHAMTW,
		},
	}
}

func DecodeSLLI(inst uint32) OP_SLLI {
	r := opcodes.OP_SLLI{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.SHAMTW = DEC_SHAMTW(inst)
	return OP_SLLI{
		OP_SLLI: r,
	}
}

type OP_SRLI struct {
	opcodes.OP_SRLI
}

func SRLI(RD uint32, RS1 uint32, SHAMTW uint32, debug DebugInfo) OP_SRLI {
	return OP_SRLI{
		opcodes.OP_SRLI{
			RD:     RD,
			RS1:    RS1,
			SHAMTW: SHAMTW,
		},
	}
}

func DecodeSRLI(inst uint32) OP_SRLI {
	r := opcodes.OP_SRLI{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.SHAMTW = DEC_SHAMTW(inst)
	return OP_SRLI{
		OP_SRLI: r,
	}
}

type OP_SRAI struct {
	opcodes.OP_SRAI
}

func SRAI(RD uint32, RS1 uint32, SHAMTW uint32, debug DebugInfo) OP_SRAI {
	return OP_SRAI{
		opcodes.OP_SRAI{
			RD:     RD,
			RS1:    RS1,
			SHAMTW: SHAMTW,
		},
	}
}

func DecodeSRAI(inst uint32) OP_SRAI {
	r := opcodes.OP_SRAI{}

	r.RD = DEC_RD(inst)
	r.RS1 = DEC_RS1(inst)
	r.SHAMTW = DEC_SHAMTW(inst)
	return OP_SRAI{
		OP_SRAI: r,
	}
}
