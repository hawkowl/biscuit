// AUTOGENERATED: DO NOT EDIT!
// Built from RISC-V ISA opcode definitions: https://github.com/riscv/riscv-opcodes

package convert

import (
	"fmt"
	"github.com/hawkowl/biscuit/pkg/assemble"
	"github.com/hawkowl/biscuit/pkg/disassemble"
)

func Convert(inp disassemble.Opcode) (assemble.Opcode, error) {
	switch r := inp.(type) {
	case disassemble.OP_LUI:
		return assemble.OP_LUI{
			OP_LUI: r.OP_LUI,
		}, nil
	case disassemble.OP_AUIPC:
		return assemble.OP_AUIPC{
			OP_AUIPC: r.OP_AUIPC,
		}, nil
	case disassemble.OP_JAL:
		return assemble.OP_JAL{
			OP_JAL: r.OP_JAL,
		}, nil
	case disassemble.OP_JALR:
		return assemble.OP_JALR{
			OP_JALR: r.OP_JALR,
		}, nil
	case disassemble.OP_BEQ:
		return assemble.OP_BEQ{
			OP_BEQ: r.OP_BEQ,
		}, nil
	case disassemble.OP_BNE:
		return assemble.OP_BNE{
			OP_BNE: r.OP_BNE,
		}, nil
	case disassemble.OP_BLT:
		return assemble.OP_BLT{
			OP_BLT: r.OP_BLT,
		}, nil
	case disassemble.OP_BGE:
		return assemble.OP_BGE{
			OP_BGE: r.OP_BGE,
		}, nil
	case disassemble.OP_BLTU:
		return assemble.OP_BLTU{
			OP_BLTU: r.OP_BLTU,
		}, nil
	case disassemble.OP_BGEU:
		return assemble.OP_BGEU{
			OP_BGEU: r.OP_BGEU,
		}, nil
	case disassemble.OP_LB:
		return assemble.OP_LB{
			OP_LB: r.OP_LB,
		}, nil
	case disassemble.OP_LH:
		return assemble.OP_LH{
			OP_LH: r.OP_LH,
		}, nil
	case disassemble.OP_LW:
		return assemble.OP_LW{
			OP_LW: r.OP_LW,
		}, nil
	case disassemble.OP_LBU:
		return assemble.OP_LBU{
			OP_LBU: r.OP_LBU,
		}, nil
	case disassemble.OP_LHU:
		return assemble.OP_LHU{
			OP_LHU: r.OP_LHU,
		}, nil
	case disassemble.OP_SB:
		return assemble.OP_SB{
			OP_SB: r.OP_SB,
		}, nil
	case disassemble.OP_SH:
		return assemble.OP_SH{
			OP_SH: r.OP_SH,
		}, nil
	case disassemble.OP_SW:
		return assemble.OP_SW{
			OP_SW: r.OP_SW,
		}, nil
	case disassemble.OP_ADDI:
		return assemble.OP_ADDI{
			OP_ADDI: r.OP_ADDI,
		}, nil
	case disassemble.OP_SLTI:
		return assemble.OP_SLTI{
			OP_SLTI: r.OP_SLTI,
		}, nil
	case disassemble.OP_SLTIU:
		return assemble.OP_SLTIU{
			OP_SLTIU: r.OP_SLTIU,
		}, nil
	case disassemble.OP_XORI:
		return assemble.OP_XORI{
			OP_XORI: r.OP_XORI,
		}, nil
	case disassemble.OP_ORI:
		return assemble.OP_ORI{
			OP_ORI: r.OP_ORI,
		}, nil
	case disassemble.OP_ANDI:
		return assemble.OP_ANDI{
			OP_ANDI: r.OP_ANDI,
		}, nil
	case disassemble.OP_ADD:
		return assemble.OP_ADD{
			OP_ADD: r.OP_ADD,
		}, nil
	case disassemble.OP_SUB:
		return assemble.OP_SUB{
			OP_SUB: r.OP_SUB,
		}, nil
	case disassemble.OP_SLL:
		return assemble.OP_SLL{
			OP_SLL: r.OP_SLL,
		}, nil
	case disassemble.OP_SLT:
		return assemble.OP_SLT{
			OP_SLT: r.OP_SLT,
		}, nil
	case disassemble.OP_SLTU:
		return assemble.OP_SLTU{
			OP_SLTU: r.OP_SLTU,
		}, nil
	case disassemble.OP_XOR:
		return assemble.OP_XOR{
			OP_XOR: r.OP_XOR,
		}, nil
	case disassemble.OP_SRL:
		return assemble.OP_SRL{
			OP_SRL: r.OP_SRL,
		}, nil
	case disassemble.OP_SRA:
		return assemble.OP_SRA{
			OP_SRA: r.OP_SRA,
		}, nil
	case disassemble.OP_OR:
		return assemble.OP_OR{
			OP_OR: r.OP_OR,
		}, nil
	case disassemble.OP_AND:
		return assemble.OP_AND{
			OP_AND: r.OP_AND,
		}, nil
	case disassemble.OP_FENCE:
		return assemble.OP_FENCE{
			OP_FENCE: r.OP_FENCE,
		}, nil
	case disassemble.OP_ECALL:
		return assemble.OP_ECALL{
			OP_ECALL: r.OP_ECALL,
		}, nil
	case disassemble.OP_EBREAK:
		return assemble.OP_EBREAK{
			OP_EBREAK: r.OP_EBREAK,
		}, nil
	case disassemble.OP_SLLI:
		return assemble.OP_SLLI{
			OP_SLLI: r.OP_SLLI,
		}, nil
	case disassemble.OP_SRLI:
		return assemble.OP_SRLI{
			OP_SRLI: r.OP_SRLI,
		}, nil
	case disassemble.OP_SRAI:
		return assemble.OP_SRAI{
			OP_SRAI: r.OP_SRAI,
		}, nil
	case disassemble.OP_CSRRW:
		return assemble.OP_CSRRW{
			OP_CSRRW: r.OP_CSRRW,
		}, nil
	case disassemble.OP_CSRRS:
		return assemble.OP_CSRRS{
			OP_CSRRS: r.OP_CSRRS,
		}, nil
	case disassemble.OP_CSRRC:
		return assemble.OP_CSRRC{
			OP_CSRRC: r.OP_CSRRC,
		}, nil
	case disassemble.OP_CSRRWI:
		return assemble.OP_CSRRWI{
			OP_CSRRWI: r.OP_CSRRWI,
		}, nil
	case disassemble.OP_CSRRSI:
		return assemble.OP_CSRRSI{
			OP_CSRRSI: r.OP_CSRRSI,
		}, nil
	case disassemble.OP_CSRRCI:
		return assemble.OP_CSRRCI{
			OP_CSRRCI: r.OP_CSRRCI,
		}, nil

	default:
		return nil, fmt.Errorf("unknown %v", inp)
	}

}
